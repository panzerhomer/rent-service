version: "3.9"

services:
  backend:
    build:
      dockerfile: Dockerfile.app
      context: .
    container_name: backend-app
    depends_on:
      - postgresql
      - migrator
    ports:
      - ${APP_PORT}:${APP_PORT}
    environment:
      APP_PORT: ${APP_PORT}
      LOG_LEVEL: ${LOG_LEVEL}
      SECRET: ${SECRET}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: postgresql
      POSTGRES_PORT: ${POSTGRES_PORT}
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend-network

  postgresql:
    image: postgres:14-alpine
    container_name: postgres-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: "/var/lib/postgresql/data/pgdata"
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - ./postgres/postgres.conf:/usr/local/etc/postgres/postgres.conf
      - ./postgres/postgres-data:/var/lib/postgresql/data
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '1'
    #       memory: 1G
    networks:
        - backend-network

  migrator:
    build:
      dockerfile: Dockerfile.migrator
      context: .
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: postgresql
      POSTGRES_PORT: ${POSTGRES_PORT}
    env_file:
      - .env
    volumes:
      - migrations:/migrations
    # entrypoint: [ "migrate", "-path", "/migrations", "-database", "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable", "up"]    
    networks:
          - backend-network

volumes:
  postgres:
  migrations:
  
networks:
    backend-network: 
        driver: bridge

